// RTOS Framework - Spring 2019
// J Losh

// Student Name: AAKASH MOHAN
// TO DO: Add your name on this line.  Do not include your ID number in the file.

// Submit only two .c files in an e-mail to me (not in a compressed file):
// xx_rtos.c
// xx_tm4c123gh6pm_startup_ccs.c
// (xx is a unique number that will be issued in class)
// Please do not change any function name in this code or the thread priorities

//-----------------------------------------------------------------------------
// Hardware Target
//-----------------------------------------------------------------------------

// Target Platform: EK-TM4C123GXL Evaluation Board
// Target uC:       TM4C123GH6PM
// System Clock:    40 MHz

// Hardware configuration:
// 5 Pushbuttons and 5 LEDs, UART
// LEDS on these pins:
// Blue:   PF2 (on-board)
// Red:    PE1
// Green:  PE2
// Yellow: PE3
// Orange: PE4
// PB0:    PA2
// PB1:    PA3
// PB2:    PA4
// PB3:    PA5
// PB4:    PA6

//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------

#include <stdint.h>
#include <stdbool.h>
#include "tm4c123gh6pm.h"

// REQUIRED: correct these bitbanding references for the off-board LEDs
#define BLUE_LED     (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 2*4))) // on-board blue LED
#define RED_LED      (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 1*4))) // off board red led
#define GREEN_LED    (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 2*4))) // off board green led
#define YELLOW_LED   (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 3*4))) // off board yellow led
#define ORANGE_LED   (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 4*4))) // off board orange led

#define PB0       (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 2*4)))    // off board PB0
#define PB1       (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 3*4)))    // off board PB1
#define PB2       (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 4*4)))    // off board PB2
#define PB3       (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 5*4)))    // off board PB3
#define PB4       (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 6*4)))    // off board PB4

#define svc_yeild 100
#define svc_sleep 101
#define svc_wait 102
#define svc_post 103

uint32_t stkptrval,sum=0, R0,R1,R2,u=0, v=1, w=2, x=4, y=8, z=16,i,k,a=1;

//-----------------------------------------------------------------------------
// RTOS Defines and Kernel Variables
//-----------------------------------------------------------------------------

// function pointer
typedef void (*_fn)();

// semaphore
#define MAX_SEMAPHORES 5
#define MAX_QUEUE_SIZE 5
struct semaphore
{
    uint16_t count;
    uint16_t queueSize;
    uint32_t processQueue[MAX_QUEUE_SIZE]; // store task index here
} semaphores[MAX_SEMAPHORES];
uint8_t semaphoreCount = 0;

struct semaphore *keyPressed, *keyReleased, *flashReq, *resource;

// task
#define STATE_INVALID    0 // no task
#define STATE_UNRUN      1 // task has never been run
#define STATE_READY      2 // has run, can resume at any time
#define STATE_DELAYED    3 // has run, but now awaiting timer
#define STATE_BLOCKED    4 // has run, but now blocked by semaphore

#define MAX_TASKS 10       // maximum number of valid tasks
uint8_t taskCurrent = 0;   // index of last dispatched task
uint8_t taskCount = 0;     // total number of valid tasks

uint32_t stack[MAX_TASKS][256];  // 1024 byte stack for each thread

struct _tcb
{
    uint8_t state;                 // see STATE_ values above
    void *pid;                     // used to uniquely identify thread
    void *sp;                      // location of stack pointer for thread
    int8_t priority;               // -8=highest to 7=lowest
    int8_t currentPriority;        // used for priority inheritance
    uint32_t timeout;              // timeout until sleep complete
    char name[16];                 // name of task used in ps command
    void *semaphore;               // pointer to the semaphore that is blocking the thread
    uint8_t skipcount;
} tcb[MAX_TASKS];

//-----------------------------------------------------------------------------
// RTOS Kernel Functions
//-----------------------------------------------------------------------------

void rtosInit()
{
    uint8_t i;
    // no tasks running
    taskCount = 0;
    // clear out tcb records
    for (i = 0; i < MAX_TASKS; i++)
    {
        tcb[i].state = STATE_INVALID;
        tcb[i].pid = 0;
    }
    // REQUIRED: initialize systick for 1ms system timer
}

// REQUIRED: Implement prioritization to 8 levels
int rtosScheduler()
{
    bool ok;
    static uint8_t task = 0xFF;
    ok = false;
    while (!ok)
    {
        task++;
        if (task >= MAX_TASKS)
            task = 0;

       // ok = (tcb[task].state == STATE_READY || tcb[task].state == STATE_UNRUN);
        if (a == 1)
                {
                    if (tcb[task].skipcount >= (tcb[task].currentPriority+8))
                    {
                        ok = (tcb[task].state == STATE_READY
                                || tcb[task].state == STATE_UNRUN);
                        tcb[task].skipcount = 0;
                    }
                    else
                    {
                        tcb[task].skipcount++;
                    }
                }

    }
    return task;
}

uint32_t getsp()
{
    __asm("     MOV  R0, SP" );
    __asm("     BX    LR");
}

void setsp(uint32_t a)
{
    __asm("     ADD  SP, #8" );
    __asm("     MOV  SP, R0" );
    __asm("     SUB  SP, #8" );
}

void rtosStart()
{
    // REQUIRED: add code to call the first task to be run

    _fn fn;
    taskCurrent = rtosScheduler();
    stkptrval=getsp();
    setsp((uint32_t) tcb[taskCurrent].sp);
    tcb[taskCurrent].state=STATE_READY;
    fn = (_fn) tcb[taskCurrent].pid;
    (*fn)();
    // Add code to initialize the SP with tcb[task_current].sp;

}

bool createThread(_fn fn, char name[], int priority)
{
    bool ok = false;
    uint8_t i = 0;
    bool found = false;
    // REQUIRED: store the thread name
    // add task if room in task list
    if (taskCount < MAX_TASKS)
    {
        // make sure fn not already in list (prevent reentrancy)
        while (!found && (i < MAX_TASKS))
        {
            found = (tcb[i++].pid ==  fn);
        }
        if (!found)
        {
            // find first available tcb record
            i = 0;
            while (tcb[i].state != STATE_INVALID) {i++;}
            tcb[i].state = STATE_UNRUN;
            tcb[i].pid = fn;
            tcb[i].sp = &stack[i][255];
            tcb[i].priority = priority;
            tcb[i].currentPriority = priority;
            // increment task count
            taskCount++;
            ok = true;
        }
    }
    // REQUIRED: allow tasks switches again
    return ok;
}

// REQUIRED: modify this function to destroy a thread
// REQUIRED: remove any pending semaphore waiting
void destroyThread(_fn fn)
{
}

// REQUIRED: modify this function to set a thread priority
void setThreadPriority(_fn fn, uint8_t priority)
{
}

struct semaphore* createSemaphore(uint8_t count)
{
    struct semaphore *pSemaphore = 0;
    if (semaphoreCount < MAX_SEMAPHORES)
    {
        pSemaphore = &semaphores[semaphoreCount++];
        pSemaphore->count = count;
    }
    return pSemaphore;
}

// REQUIRED: modify this function to yield execution back to scheduler using pendsv
// push registers, call scheduler, pop registers, return to new function
void yield()
{
    __asm("    SVC #100");
}

// REQUIRED: modify this function to support 1ms system timer
// execution yielded back to scheduler until time elapses using pendsv
// push registers, set state to delayed, store timeout, call scheduler, pop registers,
// return to new function (separate unrun or ready processing)
void sleep(uint32_t tick)
{
    __asm("    SVC #101");
}

// REQUIRED: modify this function to wait a semaphore with priority inheritance
// return if avail (separate unrun or ready processing), else yield to scheduler using pendsv
void wait(struct semaphore *pSemaphore)
{
    __asm("    SVC #102");
}

// REQUIRED: modify this function to signal a semaphore is available using pendsv
void post(struct semaphore *pSemaphore)
{
    __asm("    SVC #103");
}

// REQUIRED: modify this function to add support for the system timer
// REQUIRED: in preemptive code, add code to request task switch
void systickIsr()
{
    for(i=0;i<MAX_TASKS;i++)
    {
        if( (tcb[i].state == STATE_DELAYED))
        {
          tcb[i].timeout--;
          if (tcb[i].timeout == 0)
          tcb[i].state = STATE_READY;
        }
    }

}

// REQUIRED: in coop and preemptive, modify this function to add support for task switching
// REQUIRED: process UNRUN and READY tasks differently
void pendSvIsr()
{
    __asm("     PUSH {R4}" );
    __asm("     PUSH {R5}" );
    __asm("     PUSH {R6}" );
    __asm("     PUSH {R7}" );
    __asm("     PUSH {R8}" );
    __asm("     PUSH {R9}" );
    __asm("     PUSH {R10}" );
    __asm("     PUSH {R11}" );


    tcb[taskCurrent].sp =(void*) getsp();
    setsp(stkptrval);
    taskCurrent = rtosScheduler();
    if(tcb[taskCurrent].state==STATE_READY)
    {
       setsp((uint32_t) tcb[taskCurrent].sp);
    }
    if(tcb[taskCurrent].state==STATE_UNRUN)
    {
        setsp((uint32_t) tcb[taskCurrent].sp);
        stack[taskCurrent][255] = 0x01000000;
        stack[taskCurrent][254] = (uint32_t) tcb[taskCurrent].pid;
        stack[taskCurrent][253] = 14;
        stack[taskCurrent][252] = 12;
        stack[taskCurrent][251] = 3;
        stack[taskCurrent][250] = 2;
        stack[taskCurrent][249] = 1;
        stack[taskCurrent][248] = 0;
        stack[taskCurrent][247] = 0xfffffff9;
        stack[taskCurrent][246] = 4;
        stack[taskCurrent][245] = 4;
        stack[taskCurrent][244] = 5;
        stack[taskCurrent][243] = 6;
        stack[taskCurrent][242] = 7;
        stack[taskCurrent][241] = 8;
        stack[taskCurrent][240] = 9;
        stack[taskCurrent][239] = 10;
        stack[taskCurrent][238] = 11;


       tcb[taskCurrent].sp = &stack[taskCurrent][238];
       setsp((uint32_t) tcb[taskCurrent].sp);
       tcb[taskCurrent].state = STATE_READY;
    }

    __asm("     POP {R11}" );
    __asm("     POP {R10}" );
    __asm("     POP {R9}" );
    __asm("     POP {R8}" );
    __asm("     POP {R7}" );
    __asm("     POP {R6}" );
    __asm("     POP {R5}" );
    __asm("     POP {R4}" );

}

uint32_t getsvc()
{

}

uint32_t get_R0()
{

}

uint32_t get_R1()
{
    __asm("     MOV  R0, R1" );
}

uint32_t get_R2()
{
    __asm("     MOV  R0, R2" );
}
// REQUIRED: modify this function to add support for the service call
// REQUIRED: in preemptive code, add code to handle synchronization primitives
void svCallIsr()
{

    R0=get_R0();
    R1=get_R1();
    R2=get_R2();

    __asm("    MOV R0,SP ");
    __asm("    ADD R0,#40");
    __asm("    LDR R0, [R0]");
    __asm("    LDRB R0, [R0, #-2]");


   uint32_t svval = getsvc();

   switch(svval)
   {
       case svc_yeild :
                       {
                           NVIC_INT_CTRL_R  = 0x10000000;
                           break;
                       }

       case svc_sleep :
                       {
                           tcb[taskCurrent].timeout = R0;
                           tcb[taskCurrent].state = STATE_DELAYED;
                           NVIC_INT_CTRL_R  = 0x10000000;
                           break;
                       }

       case svc_wait :
                       {
                           struct semaphore *pSemaphore;
                           pSemaphore = R0;
                           if(pSemaphore->count>0)
                           {
                               pSemaphore->count--;
                           }
                           else
                           {
                               pSemaphore->processQueue[pSemaphore->queueSize] =tcb[taskCurrent].pid;
                               tcb[taskCurrent].state = STATE_BLOCKED;
                               pSemaphore->queueSize++;
                               tcb[taskCurrent].semaphore = pSemaphore;
                               NVIC_INT_CTRL_R  = 0x10000000;
                           }
                           break;
                       }

       case svc_post :
                       {
                           struct semaphore *pSemaphore;
                           pSemaphore = R0;
                           pSemaphore->count++;
                           if(pSemaphore->queueSize>0)
                           {
                             for(i=0;i<MAX_TASKS;i++)
                             {
                               for(k=0;k<pSemaphore->queueSize;k++)
                               {
                                 if(pSemaphore->processQueue[k] ==tcb[i].pid)
                                 {
                                   tcb[i].state = STATE_READY;
                                   pSemaphore->processQueue[k]=pSemaphore->processQueue[k+1];
                                   pSemaphore->queueSize--;
                                 }

                               }
                             }

                           }

                          // NVIC_INT_CTRL_R = 0x10000000;
                           break;
                       }
       default:
                           break;

   }

}

//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------

// Initialize Hardware
void initHw()
{
  // REQUIRED: Add initialization for blue, orange, red, green, and yellow LEDs
  //           5 pushbuttons, and uart
    // Configure HW to work with 16 MHz XTAL, PLL enabled, system clock of 40 MHz
        SYSCTL_RCC_R = SYSCTL_RCC_XTAL_16MHZ | SYSCTL_RCC_OSCSRC_MAIN
                | SYSCTL_RCC_USESYSDIV | (4 << SYSCTL_RCC_SYSDIV_S);

        // Set GPIO ports to use AP (not needed since default configuration -- for clarity)
        SYSCTL_GPIOHBCTL_R = 0;

        //Enable Port F
        SYSCTL_RCGC2_R = SYSCTL_RCGC2_GPIOE| SYSCTL_RCGC2_GPIOA | SYSCTL_RCGC2_GPIOF;

        // Configure LED

        GPIO_PORTF_DIR_R = 0x04;  // bit 1 is output
        GPIO_PORTF_DR2R_R = 0x04; // set drive strength to 2mA (not needed since default configuration -- for clarity)
        GPIO_PORTF_DEN_R = 0x04;  // enable LED

        GPIO_PORTE_DIR_R = 0x1E;  // bit 1 is output
        GPIO_PORTE_DR2R_R = 0x1E; // set drive strength to 2mA (not needed since default configuration -- for clarity)
        GPIO_PORTE_DEN_R = 0x1E;  // enable LED

        GPIO_PORTA_DEN_R = 0x7C;  // enable pushbuttons
        GPIO_PORTA_PUR_R = 0x7C;  // pull up for push buttons

        // Configure UART0 pins
        SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0; // turn-on UART0, leave other uart in same status
        GPIO_PORTA_DEN_R |= 3;                         // default, added for clarity
        GPIO_PORTA_AFSEL_R |= 3;                       // default, added for clarity
        GPIO_PORTA_PCTL_R = GPIO_PCTL_PA1_U0TX | GPIO_PCTL_PA0_U0RX;

        // Configure UART0 to 115200 baud, 8N1 format (must be 3 clocks from clock enable and config writes)
        UART0_CTL_R = 0;                 // turn-off UART0 to allow safe programming
        UART0_CC_R = UART_CC_CS_SYSCLK;                 // use system clock (40 MHz)
        UART0_IBRD_R = 21; // r = 40 MHz / (Nx115.2kHz), set floor(r)=21, where N=16
        UART0_FBRD_R = 45;                               // round(fract(r)*64)=45
        UART0_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_FEN; // configure for 8N1 w/ 16-level FIFO
        UART0_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN; // enable TX, RX, and module

        // Enable systick Timer
        NVIC_ST_CTRL_R = 0x00000007;                //Enable SysTick during configuration
        NVIC_ST_RELOAD_R = 40000;                   //Reload value configured for 1ms
        NVIC_ST_CURRENT_R = 0;                      //Current value is reset to


}

// Blocking function that writes a serial character when the UART buffer is not full
void putcUart0(char c)
{
    while (UART0_FR_R & UART_FR_TXFF)
        ;
    UART0_DR_R = c;
}

// Blocking function that writes a string when the UART buffer is not full
void putsUart0(char* str)
{
    uint8_t i;
    for (i = 0; i < strlen(str); i++)
        putcUart0(str[i]);
}

// Blocking function that returns with serial data once the buffer is not empty
char getcUart0()
{
    while (UART0_FR_R & UART_FR_RXFE)
        ;
    return UART0_DR_R & 0xFF;
}

// Approximate busy waiting (in units of microseconds), given a 40 MHz system clock
void waitMicrosecond(uint32_t us)
{
                                              // Approx clocks per us
    __asm("WMS_LOOP0:   MOV  R1, #6");          // 1
    __asm("WMS_LOOP1:   SUB  R1, #1");          // 6
    __asm("             CBZ  R1, WMS_DONE1");   // 5+1*3
    __asm("             NOP");                  // 5
    __asm("             B    WMS_LOOP1");       // 5*3
    __asm("WMS_DONE1:   SUB  R0, #1");          // 1
    __asm("             CBZ  R0, WMS_DONE0");   // 1
    __asm("             B    WMS_LOOP0");       // 1*3
    __asm("WMS_DONE0:");                        // ---
                                                // 40 clocks/us + error
}

// REQUIRED: add code to return a value from 0-31 indicating which of 5 PBs are pressed
uint8_t readPbs()
{
    sum=0;
    if(PB0==0)
    {
        sum=sum+v;
    }
    if(PB1==0)
    {
        sum=sum+w;
    }
    if(PB2==0)
    {
        sum=sum+x;
    }
    if(PB3==0)
    {
        sum=sum+y;
    }
    if(PB4==0)
    {
        sum=sum+z;
    }

     return sum;

}

//-----------------------------------------------------------------------------
// YOUR UNIQUE CODE
// REQUIRED: add any custom code in this space
//-----------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  Task functions
// ------------------------------------------------------------------------------

// one task must be ready at all times or the scheduler will fail
// the idle task is implemented for this purpose
void idle()
{
    while(true)
    {
        ORANGE_LED = 1;
        waitMicrosecond(1000);
        ORANGE_LED = 0;
        yield();
    }
}

//Idle 2
/*void idle2()
{
    while(true)
    {
        YELLOW_LED = 1;
        waitMicrosecond(1000);
        YELLOW_LED = 0;
        yield();
    }
}*/

void flash4Hz()
{
    while(true)
    {
        GREEN_LED ^= 1;
        sleep(125);
    }
}

void oneshot()
{
    while(true)
    {
        wait(flashReq);
        YELLOW_LED = 1;
        sleep(1000);
        YELLOW_LED = 0;
    }
}

void partOfLengthyFn()
{
    // represent some lengthy operation
    waitMicrosecond(990);
    // give another process a chance to run
    yield();
}

void lengthyFn()
{
    uint16_t i;
    while(true)
    {
        wait(resource);
        for (i = 0; i < 5000; i++)
        {
            partOfLengthyFn();
        }
        RED_LED ^= 1;
        post(resource);
    }
}

void readKeys()
{
    uint8_t buttons;
    while(true)
    {
        wait(keyReleased);
        buttons = 0;
        while (buttons == 0)
        {
            buttons = readPbs();
            yield();
        }
        post(keyPressed);
        if ((buttons & 1) != 0)
        {
            YELLOW_LED ^= 1;
            RED_LED = 1;
        }
        if ((buttons & 2) != 0)
        {
            post(flashReq);
            RED_LED = 0;
        }
        if ((buttons & 4) != 0)
        {
            createThread(flash4Hz, "Flash4Hz", 0);
        }
        if ((buttons & 8) != 0)
        {
            destroyThread(flash4Hz);
        }
        if ((buttons & 16) != 0)
        {
            setThreadPriority(lengthyFn, 4);
        }
        yield();
    }
}

void debounce()
{
    uint8_t count;
    while(true)
    {
        wait(keyPressed);
        count = 10;
        while (count != 0)
        {
            sleep(10);
            if (readPbs() == 0)
                count--;
            else
                count = 10;
        }
        post(keyReleased);
    }
}

void uncooperative()
{
    while(true)
    {
        while (readPbs() == 8)
        {
        }
        yield();
    }
}

void important()
{
     while(true)
    {
        wait(resource);
        BLUE_LED = 1;
        sleep(1000);
        BLUE_LED = 0;
        post(resource);
    }
}

void shell()
{
    while (true)
    {
        // REQUIRED: add processing for the shell commands through the UART here
    }
}

//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------

int main(void)
{
    bool ok;

    // Initialize hardware
    initHw();
    rtosInit();

    // Power-up flash
    GREEN_LED = 1;
    waitMicrosecond(250000);
    GREEN_LED = 0;
    waitMicrosecond(250000);

   // Initialize semaphores
    keyPressed = createSemaphore(1);
    keyReleased = createSemaphore(0);
    flashReq = createSemaphore(5);
    resource = createSemaphore(1);

    // Add required idle process at lowest priority
    ok =  createThread(idle, "Idle", 7);
   // ok =  createThread(idle2, "Idle2", 7);
    // Add other processes
    ok &= createThread(lengthyFn, "LengthyFn", 4);
    ok &= createThread(flash4Hz, "Flash4Hz", 0);
    ok &= createThread(oneshot, "OneShot", -4);
    ok &= createThread(readKeys, "ReadKeys", 4);
    ok &= createThread(debounce, "Debounce", 4);
    ok &= createThread(important, "Important", -8);
    ok &= createThread(uncooperative, "Uncoop", 2);
    /*ok &= createThread(shell, "Shell", 0);*/

    // Start up RTOS
    if (ok)
        rtosStart(); // never returns
    else
        RED_LED = 1;

    return 0;
}